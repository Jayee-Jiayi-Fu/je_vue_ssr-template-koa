const webpack = require("webpack");
const MFS = require("memory-fs");
const path = require("path");
const clientConfig = require("./webpack.client.config");
const serverConfig = require("./webpack.server.config");
const koaWebpack = require("koa-webpack");

const setupDevServer = async (app, onServerBundleReady) => {
  // additional client entry for hot reload
  clientConfig.entry.app = [
    "webpack-hot-middleware/client",
    clientConfig.entry.app,
  ];

  const clientCompiler = webpack(clientConfig);
  // setup dev middleware
  const devMiddleware = {
    publicPath: clientConfig.output.publicPath,
    serverSideRender: true,
    logLevel: "silent",
  };
  // setup hot middleware
  const hotClient = {};

  const middleware = await koaWebpack({
    compiler: clientCompiler,
    devMiddleware,
    hotClient,
  });
  app.use(middleware);

  // watch src files and rebuild SSR bundle
  global.console.log("Building SSR bundle...");
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();

  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (error, stats) => {
    if (error) throw error;

    global.console.log(
      `${stats.toString({
        colors: true,
        modules: false,
        children: false,
        chunks: false,
        chunkModules: false,
      })}\n\n`
    );

    if (stats.hasErrors()) {
      console.error(stats.compilation.errors);
      throw new Error(stats.compilation.errors);
    }

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(
      mfs.readFileSync(
        path.join(clientConfig.output.path, "vue-ssr-server-bundle.json"),
        "utf-8"
      )
    );
    onServerBundleReady(bundle);
  });
};

module.exports = setupDevServer;
